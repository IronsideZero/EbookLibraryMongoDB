using System.Linq;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;
using MongoDB.Driver;
using EbookLibraryMongoDB.Models;
using System;

namespace EbookLibraryMongoDB.Services
{
    /// <summary>
    /// This class provides all the basic CRUD operations on a book
    /// </summary>
    public class BookService
    {
        private readonly IMongoCollection<Book> books;
        private readonly IMongoCollection<BookTag> bookTags;
        private UserService userService;

        public BookService(IConfiguration config)
        {
            MongoClient client = new MongoClient(config.GetConnectionString("EbookLibMongo"));
            IMongoDatabase database = client.GetDatabase("EbookOrganizerDB");
            books = database.GetCollection<Book>("Books");
            bookTags = database.GetCollection<BookTag>("BookTags");
            //userService = new UserService(config);
        }

        public List<Book> Get()
        {
            return books.Find(book => true).ToList();
        }

        /* Get operations for books, right now just by Id, will have to add search by all properties
         */
        //public Book Get(string id)
        //{
        //    return books.Find(book => book.Id == id).FirstOrDefault();
        //}

        public Book GetByISBN(string ISBN)
        {
            return books.Find(book => book.ISBN == ISBN).FirstOrDefault();
        }

        public Book Add(Book book)
        {
            books.InsertOne(book);
            return book;
        }

        //public void Update(string id, Book bookIn)
        //{
        //    books.ReplaceOne(book => book.Id == id, bookIn);
        //}

        //public void Remove(Book bookIn)
        //{
        //    books.DeleteOne(book => book.Id == bookIn.Id);
        //}

        //public void Remove(string id)
        //{
        //    books.DeleteOne(book => book.Id == id);
        //}

        /// <summary>
        /// This method is called when the user creates a new book (or tries to). All fields are nullable except isbn, title, and author. If any of those are null, this method returns null. Otherwise, 
        /// a check is done to see if there is a matching isbn already existing. If so, that book is returned, and the out parameter is set to true to facilitate an alert to the user. Otherwise, a new 
        /// book is created, then added to the list of books. Then the out parameter is set to false, and the new book is returned.
        /// </summary>
        /// <param everything except id which is generated by mongo></param>
        /// <returns>Book, either the new book or the book that already exists</returns>
        public Book CreateNew(string isbn, string title, string author, DateTime pubDate, string series, int posInSeries, bool owned, double avgPrice, string localFilePath, int pages, string language, List<BookTag> tags, string description, out bool alreadyExists)
        {
            if(isbn == null || title == null || author == null)
            {
                alreadyExists = false;
                return null;
            }

            Book existingBook = GetByISBN(isbn);
            if(existingBook == null)
            {
                Book newBook = new Book(isbn, title, author, pubDate, series, posInSeries, owned, avgPrice, localFilePath, pages, language, tags, description);
                Add(newBook);
                alreadyExists = false;
                return newBook;
            } else
            {
                //put some stuff in here to add more tags to an already existing book if it is 'added' again
                
                alreadyExists = true;
                return existingBook;
            }
        }


        //services for tags
        public BookTag GetTag(string name)
        {
            return bookTags.Find(tag => tag.Name == name).FirstOrDefault();
        }

        public BookTag Add(BookTag tag)
        {
            bookTags.InsertOne(tag);
            return tag;
        }



        public void Remove(BookTag tagToRemove)
        {
            bookTags.DeleteOne(tag => tag.Name == tagToRemove.Name);
        }


        //service to get a user, used only when creating a new book
        public User GetUser(string email)
        {
            return userService.Get(email);
        }

        public void UpdateUserLibrary(User user, Book book)
        {
            userService.UpdateAddBook(user, book);
        }
    }
}
